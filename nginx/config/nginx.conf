# nginx.conf  --  docker-openresty
#
# This file is installed to:
#   `/usr/local/openresty/nginx/conf/nginx.conf`
# and is the file loaded by nginx at startup,
# unless the user specifies otherwise.
#
# It tracks the upstream OpenResty's `nginx.conf`, but removes the `server`
# section and adds this directive:
#     `include /etc/nginx/conf.d/*.conf;`
#
# The `docker-openresty` file `nginx.vh.default.conf` is copied to
# `/etc/nginx/conf.d/default.conf`.  It contains the `server section
# of the upstream `nginx.conf`.
#
# See https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files
#

user  nobody;
# CPU 的亲源等
worker_processes  auto;

worker_rlimit_nofile 65535;
# ulimit -n 关联


# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;



error_log  /dev/stdout;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    use epoll;    
    accept_mutex off;   #关闭惊群
    worker_connections 10000; #根据你的机器配置
    multi_accept on;
}



stream {
    include /etc/nginx/stream-sites-enabled/*;
}

http {
    include       mime.types;
    # default_type  application/octet-stream;
    default_type text/html;
    charset utf-8;
    
    # Enables or disables the use of underscores in client request header fields.
    # When the use of underscores is disabled, request header fields whose names contain underscores are marked as invalid and become subject to the ignore_invalid_headers directive.
    # underscores_in_headers off;

    log_format  main escape=none '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /dev/stdout  main;

    # Log in JSON Format
    # log_format nginxlog_json escape=json '{ "timestamp": "$time_iso8601", '
    # '"remote_addr": "$remote_addr", '
    #     '"body_bytes_sent": $body_bytes_sent, '
    #     '"request_time": $request_time, '
    #     '"response_status": $status, '
    #     '"request": "$request", '
    #     '"request_method": "$request_method", '
    #     '"host": "$host",'
    #     '"upstream_addr": "$upstream_addr",'
    #     '"http_x_forwarded_for": "$http_x_forwarded_for",'
    #     '"http_referrer": "$http_referer", '
    #     '"http_user_agent": "$http_user_agent", '
    #     '"http_version": "$server_protocol", '
    #     '"nginx_access": true }';
    # access_log /dev/stdout nginxlog_json;

    # 建议和打开文件数一致，inactive 是指经过多长时间文件没被请求后删除缓存
    open_file_cache max=65535 inactive=60s;
    # 在inactive时间 1 次没有请求就删除
    open_file_cache_min_uses 1;
    # 这个是指多长时间检查一次缓存的有效信息
    open_file_cache_valid 60s;
    open_file_cache_errors on;
    tcp_nopush on;
    tcp_nodelay on;
    server_tokens off;
    sendfile on;



    # time相关
    keepalive_timeout 30;
    client_header_timeout 30;
    client_body_timeout 30;
    reset_timedout_connection on;
    send_timeout 30;



    # See Move default writable paths to a dedicated directory (#119)
    # https://github.com/openresty/docker-openresty/issues/119
    client_body_temp_path /var/run/openresty/nginx-client-body;
    proxy_temp_path       /var/run/openresty/nginx-proxy;
    fastcgi_temp_path     /var/run/openresty/nginx-fastcgi;
    uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;
    scgi_temp_path        /var/run/openresty/nginx-scgi;

    # gzip on;
    # gzip_min_length 1k;
    # gzip_disable "msie6";
    # gzip_vary on;
    # gzip_proxied any;
    # gzip_comp_level 6;
    # gzip_buffers 16 8k;
    # gzip_http_version 1.1;
    # gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;

    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;

    # Don't reveal OpenResty version to clients.
    # server_tokens off;
    client_max_body_size 30m;
}

# stream {
#     upstream rtmp {
#         server 192.168.14.123:8180;
#     }

#     server {
#         listen 9001;
#         proxy_pass rtmp;
        
#         log_by_lua_block {
#             ngx.log(ngx.ERR, "log_by_lua*")
#         }
#     }
# }